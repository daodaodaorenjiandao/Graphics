
float4 vs_main(float4 position : POSITION,
							float3 normal : NORMAL,
							float3 tangent : TANGENT,
							float3 bitangent : BINORMAL,
							float2 texCoord : TEXCOORD0,
							float w : TEXCOORD1,
							
							out float2 oTexCoord : TEXCOORD0,
							out float3 oLightDir : TEXCOORD1,
							out float3 oEyeDir : TEXCOORD2,
							
							uniform float4x4 worldViewProj,
							uniform float3 lightPos,		//object space
							uniform float3 eyePos				//object space
							) : POSITION
{
	float4 oPosition;
	oPosition = mul(worldViewProj,position);
	oTexCoord = texCoord;
	//oTexCoord = texCoord * float2(4,2);

	float3 binormal = cross(normal,tangent) * w;
	float3x3 rotation = float3x3(tangent,binormal,normal);
	
	oLightDir = lightPos - position.xyz;		//这里没有对物体的position进行变换是因为程序中没有设置世界变换矩阵.设置为object space
	oEyeDir = eyePos - position.xyz;
	
	oLightDir = mul(rotation,oLightDir);
	oEyeDir = mul(rotation,oEyeDir);
	
	return oPosition;
}

float3 expand(float3 v)
{
	v = (v - 0.5) * 2;
	return v;
}

float4 ps_main(float2 texCoord : TEXCOORD0,
							float3 lightDir : TEXCOORD1,
							float3 eyeDir : TEXCOORD2,
							
							uniform sampler2D samplerTexture,
							uniform samplerCUBE samplerCubeTexture,
							uniform float power) : COLOR
{
	
	float3 normal;
	normal = tex2D(samplerTexture,texCoord);		//这是已经标准化的，且被压缩的,这里有个cg的bug，如果在后面获取texCoord坐标的值那么将不能得到正确的效果，出现很多斑点
	normal = expand(normal);
	

	lightDir = texCUBE(samplerCubeTexture,lightDir).xyz;
	lightDir = expand(lightDir);
	
	eyeDir = texCUBE(samplerCubeTexture,eyeDir).xyz;				//normalize eyeDir
	eyeDir = expand(eyeDir);
	
	
	
	float3 halfAngleDir = lightDir + eyeDir;		// <<==>> (lightDir + eyeDir) / 2,因为要规范化，所以有无系数无关
	halfAngleDir = texCUBE(samplerCubeTexture,halfAngleDir).xyz;		//normalize halfAngleDir
	halfAngleDir = expand(halfAngleDir);
	
	float diffuse,specular;
	diffuse = saturate(dot(lightDir,normal));
	specular = saturate(dot(halfAngleDir,normal));
	specular = pow(specular,power);
	
	float4 color;
	//define color
	float ambient = 0.3;
	float3 lightColor = float3(1.0,0.9,0.9);
	float3 DiffuseMaterial = float3(0.9, 0.6, 0.3);
	float3 SpecularMaterial = float3( 1, 1, 1 );

	color.rgb = (ambient + diffuse) * (DiffuseMaterial * lightColor) + specular * (SpecularMaterial * lightColor);
	
	color.a = 1;
	
	return color;
}